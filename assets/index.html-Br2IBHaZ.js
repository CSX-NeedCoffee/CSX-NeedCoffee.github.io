import{_ as n,c as t,b as l,a,d as p,r as e,o as h}from"./app-BPuXymsK.js";const k="/assets/QQ_1748776110229-D99W6A3l.png",r="/assets/QQ_1751383186988-DWm28Ich.png",d={},o={class:"hint-container warning"};function u(c,i){const s=e("c-table");return h(),t("div",null,[i[2]||(i[2]=l(`<h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>1. 简介</span></a></h2><h3 id="_1-1-概念" tabindex="-1"><a class="header-anchor" href="#_1-1-概念"><span>1.1 概念</span></a></h3><ul><li>有了多线程，我们就可以让程序同时做多件事情。</li></ul><h3 id="_1-2-目的" tabindex="-1"><a class="header-anchor" href="#_1-2-目的"><span>1.2 目的</span></a></h3><ul><li>实现异步操作；</li><li>提升效率（单核 CPU 不能提升效率，因为其本质上还是线程串行执行）。</li></ul><h3 id="_1-3-使用说明" tabindex="-1"><a class="header-anchor" href="#_1-3-使用说明"><span>1.3 使用说明</span></a></h3><p>多线程能否提高程序运行效率还是要分情况的：</p><ul><li><p><code>设计角度</code>：有些任务，经过精心设计，将任务拆分，并行执行，当然可以提高程序的运行效率。但并不是所有计算任务都能拆分（参考阿姆达尔定律）；也不是所有任务都需要拆分，任务的目的如果不同，谈拆分和效率没啥意义</p></li><li><p><code>IO 角度</code>：IO 操作不占用 cpu，只是我们一般拷贝文件使用的是【阻塞 IO】，这时相当于线程虽然不用 cpu，但需要一直等待 IO 结束，没能充分利用线程。所以才有后面的【非阻塞 IO】和【异步 IO】优化。</p></li></ul><h3 id="_1-4-并发与并行" tabindex="-1"><a class="header-anchor" href="#_1-4-并发与并行"><span>1.4 并发与并行</span></a></h3><ul><li><p><code>并发</code>：在同一时刻，有多个指令在 CPU 上交替执行；</p></li><li><p><code>并行</code>：在同一时刻，有多个指令在 CPU 上同时执行。</p></li><li><p><code>进程通信</code>：同一台计算机的进程通信称为 IPC(Iner-process communication)；不同计算机之间的进程通信需要通过网络，并遵守共同的协议，例如 HTTP；</p></li><li><p><code>线程通信</code>：共享进程内的内存，一个例子是多个线程可以访问同一个共享变量；线程更轻量，线程上下文切换成本一般要比进程上下文切换低。</p></li></ul><h3 id="_1-5-线程上下文切换-thread-context-switch" tabindex="-1"><a class="header-anchor" href="#_1-5-线程上下文切换-thread-context-switch"><span>1.5 线程上下文切换（Thread Context Switch）</span></a></h3><p>因为以下一些原因导致 cpu 不再执行当前的线程，转而执行另一个线程的代码：</p><ul><li>线程的 cpu 时间片用完；</li><li>垃圾回收 ；</li><li>有更高优先级的线程需要运行</li><li>线程自己调用了 sleep、yield、wait、join、park、synchronized、lock 等方法</li></ul><p>当 Context Switch 发生时，需要由操作系统保存当前线程的状态，并恢复另一个线程的状态（这个状态包括程序计数器、虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址），对应 Java 中的概念就是程序计数器，它的作用是记住下一条 jvm 指令的执行地址，是线程私有的 。</p><div class="hint-container warning"><p class="hint-container-title">Context Switch 频繁发生会影响性能</p></div><h2 id="_2-创建线程" tabindex="-1"><a class="header-anchor" href="#_2-创建线程"><span>2. 创建线程</span></a></h2><h3 id="方式一-继承-thread-类" tabindex="-1"><a class="header-anchor" href="#方式一-继承-thread-类"><span>方式一：继承 Thread 类</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//1. 创建线程类继承 Thread，重写 run 方法</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyThread</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Override</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 线程执行逻辑</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">helloWorld</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //2. 创建线程、设置线程名、启动线程</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        Thread</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> t1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MyThread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        Thread</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> t2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MyThread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        t1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">线程1: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        t2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">线程2: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        t1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        t2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="方式二-实现-runnable-接口" tabindex="-1"><a class="header-anchor" href="#方式二-实现-runnable-接口"><span>方式二：实现 Runnable 接口</span></a></h3><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//1. 创建类实现Runnable接口，重写run方法</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyRunnable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> implements</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Runnable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Override</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">   public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> run</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">       for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">           System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">currentThread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">getName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">: HelloWorld</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">       }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">   }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //2. 创建Runnable实现类对象，用于创建线程对象</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        Runnable</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> myRunnable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MyRunnable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //3. 创建线程对象，启动方法</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        Thread</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> t1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">myRunnable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        Thread</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> t2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">myRunnable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        t1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">线程1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        t2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setName</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">线程2</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        t1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        t2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><h3 id="方式三-实现-callable-接口" tabindex="-1"><a class="header-anchor" href="#方式三-实现-callable-接口"><span>方式三：实现 Callable 接口</span></a></h3><ul><li>原理是保护性暂停设计模式。get 方法会阻塞等待线程执行完毕从而拿到执行结果</li></ul><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//1. 创建类实现Callable接口，泛型为返回值类型</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyCallable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> implements</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Callable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    @</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Override</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Integer </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">call</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> throws</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Exception </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //线程执行逻辑: 1-100累加</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> sum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 100</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">            sum </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">+=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">        }</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> sum</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">util</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">concurrent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Callable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">util</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">concurrent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ExecutionException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">import</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> java</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">util</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">concurrent</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">FutureTask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> throws</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ExecutionException</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> InterruptedException </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //2. 创建Callable实现类对象</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        MyCallable</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> callable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> MyCallable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //3. 创建FutureTask对象，多个线程就创建多个</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        FutureTask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> future1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> FutureTask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&gt;(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">callable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        FutureTask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">Integer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> future2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> FutureTask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&gt;(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">callable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //4. 创建Thread对象，多个线程就创建多个，启动线程</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        Thread</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> t1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">future1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        Thread</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> t2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Thread</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">future2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        t1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        t2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">start</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //5. 调用get方法获取返回值</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">线程1执行结果</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> future1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">线程2执行结果</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> future2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">());</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p><strong><em>三种方式的优缺点：</em></strong></p>`,26)),a(s,{columns:[{title:"",key:"compare",width:"155px"},{title:"优点",key:"advantage"},{title:"缺点",key:"disadvantage"}],data:[{compare:"继承Thread类",advantage:"编程比较简单，可以直接使用Thread类中的方法",disadvantage:"扩展性较差，不能再继承其他的类"},{compare:"实现Runnable接口",advantage:"扩展性强，实现该接口的同时还可以继承其他的类",disadvantage:"编程相对复杂，不能直接使用Thread类中的方法"},{compare:"实现Callable接口",advantage:"",disadvantage:""}],mergeConfig:{advantage:[{row:1,rowspan:2,colspan:1}],disadvantage:[{row:1,rowspan:2,colspan:1}]}}),i[3]||(i[3]=l('<div class="hint-container tip"><p class="hint-container-title">coding 注意事项</p><ul><li>线程一旦启动后就交给操作系统处理，会立马向下执行下一条代码</li><li>判断线程执行完毕的方法：线程对象的 run 方法执行完毕（在 run 方法末尾加善后工作）</li></ul></div><h2 id="_3-thread-类-api" tabindex="-1"><a class="header-anchor" href="#_3-thread-类-api"><span>3. Thread 类 API</span></a></h2><h3 id="_1-getname-setname" tabindex="-1"><a class="header-anchor" href="#_1-getname-setname"><span>(1). getName setName</span></a></h3><ul><li><code>String getName()</code>：返回此线程的名称</li><li><code>void setName(String name)</code>：设置线程的名字（构造方法也可以设置名字）</li><li><strong>细节</strong>： <ol><li>如果我们没有给线程设置名字，线程也是有默认的名字的，格式：Thread-X（X 序号，从 0 开始的）</li><li>如果我们要给线程设置名字，可以用 set 方法进行设置，也可以构造方法设置</li></ol></li></ul><h3 id="_2-currentthread" tabindex="-1"><a class="header-anchor" href="#_2-currentthread"><span>(2). currentThread</span></a></h3><ul><li><code>static Thread currentThread()</code>：获取当前线程的对象</li><li><strong>细节</strong>： 当 JVM 虚拟机启动之后，会自动的启动多条线程，其中有一条线程就叫做 main 线程，他的作用就是去调用 main 方法，并执行里面的代码，在以前，我们写的所有的代码，其实都是运行在 main 线程当中</li></ul><h3 id="_3-sleep-timeunit" tabindex="-1"><a class="header-anchor" href="#_3-sleep-timeunit"><span>(3). sleep&amp; TimeUnit</span></a></h3><ul><li><code>static void sleep(long time)</code>：让线程休眠指定的时间，单位为毫秒</li><li><strong>细节</strong>： <ol><li>哪条线程执行到这个方法，那么哪条线程就会在这里停留对应的时间</li><li>方法的参数：就表示睡眠的时间，单位毫秒，1 秒 = 1000 毫秒</li><li>当时间到了之后，线程会自动的醒来，继续执行下面的其他代码</li></ol></li><li><strong>补充</strong>： <ol><li>sleep 要写在同步代码外效果才明显</li><li>由 runnable（就绪或运行状态） --&gt; Time_Waiting（计时等待） --&gt; （睡眠结束）runnable</li><li>被 interrupt()方法打断后抛出 InterruptedException 异常（一般捕获）</li><li>可以使用 TimeUnit.SECOND.sleep(1) 替代 Thread.sleep(1000)，可以指定单位，可读性更好</li></ol></li></ul><h3 id="_4-setpriority-getpriority" tabindex="-1"><a class="header-anchor" href="#_4-setpriority-getpriority"><span>(4). setPriority getPriority</span></a></h3><ul><li><code>setPriority(int newPriority)</code>：设置线程的优先级</li><li><code>final int getPriority()</code>：获取线程的优先级</li><li><strong>要点</strong>： <ul><li>线程优先级会提示（hint）调度器优先调度该线程，但它仅仅是一个提示，调度器可以忽略它</li><li>如果 cpu 比较忙，那么优先级高的线程会获得更多的时间片，但 cpu 闲时，优先级几乎没作用</li></ul></li></ul><h3 id="_5-setdaemon" tabindex="-1"><a class="header-anchor" href="#_5-setdaemon"><span>(5). setDaemon</span></a></h3><ul><li><code>final void setDaemon(boolean on)</code>：设置为守护线程</li><li><strong>细节</strong>：当其他的非守护线程执行完毕之后，守护线程会陆续结束</li><li><strong>通俗理解</strong>：当女神线程结束了，那么备胎也没有存在的必要了</li><li><strong>原理及应用</strong>： <ol><li>默认情况下，Java 进程需要等待所有线程都运行结束，才会结束</li><li>当非守护线程执行完后守护线程将终止执行</li><li><strong>应用</strong>： <ul><li>垃圾回收器线程就是一种守护线程，当所有 java 线程执行完毕后，就没有 GC 的必要了</li><li>Tomcat 中的 Acceptor 和 Poller 线程都是守护线程，所以 Tomcat 接收到 shutdown 命令后，不会等待它们处理完当前请求</li></ul></li></ol></li></ul><h3 id="_6-yield" tabindex="-1"><a class="header-anchor" href="#_6-yield"><span>(6). yield</span></a></h3><ul><li><code>public static void yield()</code>：出让线程/礼让线程</li><li><strong>说明</strong>：会让当前线程从运行状态变为就绪状态，具体的实现依赖于操作系统的任务调度器</li></ul><h3 id="_7-join" tabindex="-1"><a class="header-anchor" href="#_7-join"><span>(7). join</span></a></h3><ul><li><code>public final void join()</code>：插入线程/插队线程</li><li><strong>要点</strong>： <ol><li><code>join(n)</code>：最多等待 n 毫秒</li><li>在线程 2 中调用线程 1 的 join 方法，线程 2 会等待线程 1 执行完后才执行</li><li><strong>应用</strong>：实现线程的同步</li></ol></li></ul><h3 id="_8-start" tabindex="-1"><a class="header-anchor" href="#_8-start"><span>(8). start</span></a></h3><ul><li><strong>实例方法</strong>：启动线程</li></ul><h3 id="_9-getstatus" tabindex="-1"><a class="header-anchor" href="#_9-getstatus"><span>(9). getStatus</span></a></h3><ul><li><strong>获取线程状态</strong>：Java 中线程状态是用 6 个 enum 表示，分别为：NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED</li></ul><h3 id="_10-interrupt" tabindex="-1"><a class="header-anchor" href="#_10-interrupt"><span>(10). interrupt()</span></a></h3><ul><li><strong>打断阻塞线程</strong><ul><li>抛出 InterruptedException</li><li>清空打断标记（此时调用 <code>isInterrupted() = false</code>）</li></ul></li><li><strong>打断正常线程和 park 线程</strong><ul><li>此时调用 <code>isInterrupted() = true</code>，被打断的线程可根据此条件决定线程的下一步操作</li></ul></li></ul><h3 id="_11-interrupted-isinterrupted" tabindex="-1"><a class="header-anchor" href="#_11-interrupted-isinterrupted"><span>(11). interrupted &amp; isInterrupted</span></a></h3><ul><li>调用<code>Thread.interrupted()</code>后返回打断标记，并清除打断状态（此时调用<code>isInterrupted = false</code>）</li><li>调用当前线程对象的<code>isInterrupted()</code>后返回打断标记，不会清除打断状态</li></ul><h3 id="_12-park-unpark" tabindex="-1"><a class="header-anchor" href="#_12-park-unpark"><span>(12). park&amp;unpark</span></a></h3><ul><li><p><strong>使用</strong></p><ul><li>暂停当前线程：<code>LockSupport.park();</code></li><li>恢复某个线程的运行：<code>LockSupport.unpark(暂停线程对象)</code></li></ul></li></ul><div class="hint-container note"><p class="hint-container-title">与 interrupted 的联系</p><ul><li>调用<code>interrupt</code>方法打断被<code>LockSupport.park()</code>的线程不会清空打断状态（<code>isInterrupted = true</code>）</li><li>当打断状态为<code>true</code>时再执行<code>park</code>方法将失效，若想生效则可以调用<code>Thread.interrupted()</code>将打断标记设为<code>false</code></li></ul></div><div class="hint-container note"><p class="hint-container-title">与 wait、notify 的联系</p><ul><li><code>wait</code>，<code>notify</code>和<code>notifyAll</code>必须配合<code>Object Monitor</code>一起使用，而<code>park</code>，<code>unpark</code>不必</li><li><code>park &amp; unpark</code>是以线程为单位来【阻塞】和【唤醒】线程，而<code>notify</code>只能随机唤醒一个等待线程，<code>notifyAll</code>是唤醒所有等待线程，就不那么【精确】</li><li><code>park &amp; unpark</code>可以先<code>unpark</code>，而<code>wait &amp; notify</code>不能先<code>notify</code></li></ul></div>',28)),p("div",o,[i[0]||(i[0]=p("p",{class:"hint-container-title"},"不推荐使用的 API",-1)),i[1]||(i[1]=p("p",null,"还有一些不推荐使用的方法，这些方法已过时，容易破坏同步代码块，造成线程死锁",-1)),a(s,{style:{width:"100%","table-layout":"fixed"},columns:[{title:"方法名",key:"name"},{title:"功能说明",key:"desc"}],data:[{name:"stop()",desc:"停止线程运行"},{name:"suspend()",desc:"挂起（暂停）线程运行"},{name:"resume()",desc:"恢复线程运行"}]})]),i[4]||(i[4]=l('<h2 id="_4-线程生命周期" tabindex="-1"><a class="header-anchor" href="#_4-线程生命周期"><span>4. 线程生命周期</span></a></h2><p>生命周期对应 6 个状态（根据 JUC 中的枚举类），其中运行表示线程交给操作系统执行，在 JVM 中无定义</p><p><img src="'+k+'" alt="alt text"></p><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>java 中 runnable 包括就绪状态和运行状态；</li><li>调用 wait 方法进入阻塞前会释放锁，而 sleep 和 join 不会；</li><li>如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入【阻塞状态】（操作系统层面）;但由于 BIO 导致的线程阻塞，在 Java 里无法区分，仍然认为是 runnable 状态。</li></ul></div><h2 id="_5-线程安全" tabindex="-1"><a class="header-anchor" href="#_5-线程安全"><span>5. 线程安全</span></a></h2><h3 id="_1-简介-1" tabindex="-1"><a class="header-anchor" href="#_1-简介-1"><span>1. 简介</span></a></h3><p><code>产生线程安全问题的根本</code>：多个线程同时对共享资源进行读写操作时因线程上下文切换而发生的指令交错。</p><p><code>临界区</code>：一段代码块内如果存在对共享资源的多线程读写操作，称这段代码块为临界区。</p><p><code>竞态条件</code>： 多个线程在临界区内执行，因代码执行序列不同导致结果无法预测，称之为发生了竞态条件。</p><p>线程安全解决方案：</p><ul><li><code>阻塞式解决</code>：包括 synchronized、各种互斥锁等（ReentryLock）。</li><li><code>非阻塞时解决</code>：使用原子变量。</li></ul><h3 id="_2-常见线程安全类" tabindex="-1"><a class="header-anchor" href="#_2-常见线程安全类"><span>2. 常见线程安全类</span></a></h3><details class="hint-container details"><summary>不可变类（状态创建后不可修改）</summary><ul><li>String</li><li>Integer、Long、Double 等基本类型包装类</li><li>BigInteger、BigDecimal（java.math 包）</li><li>LocalDate、LocalTime 等（Java 8 时间 API）</li><li>File（文件路径不可变）</li></ul></details><details class="hint-container details"><summary>同步类（基于 synchronized 关键字）</summary><ul><li>StringBuffer</li><li>Vector（同步的 List 实现）</li><li>Hashtable（同步的 Map 实现）</li><li>Properties（继承自 Hashtable）</li><li>Collections.synchronizedXXX()，如：Collections.synchronizedList()、synchronizedMap()等包装类。</li></ul></details><details class="hint-container details"><summary>JUC 包下的高效线程安全类（基于 CAS、分段锁、无锁算法等实现的高并发类）</summary><p><code>集合类：</code></p><ul><li>ConcurrentHashMap（分段锁/CAS，替代 Hashtable）</li><li>CopyOnWriteArrayList（写时复制，适合读多写少）</li><li>CopyOnWriteArraySet</li><li>BlockingQueue 接口及其实现（如 ArrayBlockingQueue、LinkedBlockingQueue）</li></ul><p><code>原子类（java.util.concurrent.atomic）</code>：</p><ul><li><p>AtomicInteger、AtomicLong、AtomicBoolean</p></li><li><p>AtomicReference、AtomicStampedReference</p></li><li><p>LongAdder、DoubleAdder（高并发计数优化）</p></li></ul><p><code>锁与同步工具类：</code></p><ul><li>ReentrantLock（可重入锁）</li><li>CountDownLatch、CyclicBarrier、Semaphore</li><li>Exchanger（线程间交换数据）</li></ul></details><details class="hint-container details"><summary>其他线程安全类</summary><ul><li>ThreadLocal（线程隔离变量，非全局安全但避免竞争）</li><li>Random（线程安全但性能差，推荐用 ThreadLocalRandom）</li><li>javax.servlet.ServletContext（Web 容器中线程安全）</li></ul></details><p>分类对比总结</p>',17)),a(s,{columns:[{title:"分类",key:"category"},{title:"特点",key:"feature"},{title:"典型示例",key:"examples"}],data:[{category:"不可变类",feature:"无状态修改，天然线程安全",examples:"String, BigInteger"},{category:"同步类（JDK旧）",feature:"方法级 synchronized，性能低",examples:"Vector, Hashtable"},{category:"JUC包",feature:"高性能并发控制（CAS/分段锁）",examples:"ConcurrentHashMap"},{category:"原子类",feature:"无锁算法（CAS）",examples:"AtomicLong, LongAdder"}]}),i[5]||(i[5]=l(`<div class="hint-container important"><p class="hint-container-title">这里说的线程安全的类是指，多个线程调用他们<code>同一个实例的某个方法</code>时是线程安全的，但调用它们多个方法的组合并不安全，称之为<mark>非原子操作</mark>。</p><p>如以下代码：</p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Hashtable</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> table</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Hashtable</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> table</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">key</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ==</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> null</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> )</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  table</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">put</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">key</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">value</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre></div><p><img src="`+r+`" alt="alt text"></p></div><p>todo。。。</p><ul><li><ol start="5"><li>什么场景可能会出现线程不安全</li></ol></li><li><ol><li><p>多个线程读写非线程安全的静态成员变量</p><ul><li>ticket 为静态变量</li></ul></li></ol><ul><li><ol start="2"><li>多个线程读写同一对象的非线程安全的成员变量</li></ol></li><li></li><li><ol start="3"><li>方法中存在其他线程读写局部变量的情况</li></ol></li><li><p>以下为一个例子：此时子类可以重写父类的非 private、final 方法并创建线程操作局部变量，使得重写方法可以修改传来的形参、成员变量，因此对于安全性有要求且不想往外暴露的类一般为其添加 final 修饰符。</p></li><li><p>注意：这里为什么说 ”可能？</p></li><li><ol><li><p>如果修改的共享变量时可以保证原子性，则不会出现线程安全问题</p><ul><li>如：多个线程同时调用线程安全类的某个方法 只有共享变量 = xxx 这一个操作</li></ul></li></ol><ul><li><ol start="2"><li>如果修改变量时存在读写操作，则会出现线程安全问题</li></ol></li><li><p>如：共享变量 = xxx //先赋值 共享变量.xxx // 再调用方法，此时无法保证代码原子性</p></li></ul></li></ul></li><li><ol start="6"><li>什么场景不会出现线程安全</li></ol></li><li><ol><li><p>读写方法中的局部变量，因为局部变量是线程私有的，一般只有一个线程读写，不存在线程安全问题</p><ul><li>调用方法时，每个线程都会为局部变量创建各自不同的实例</li></ul></li></ol></li><li><ol start="7"><li>注意</li></ol></li><li><ol><li>判断共享变量是否绝对线程安全是看多个线程读写共享变量时是否能保证其代码的原子性</li></ol><ul><li><ol start="2"><li>任何出现线程安全的问题的类中必然提供了修改共享变量，且修改操作非原子性的方法，否则将不会出现线程安全问题</li></ol></li></ul></li></ul><h3 id="_2-synchronized" tabindex="-1"><a class="header-anchor" href="#_2-synchronized"><span>2. synchronized</span></a></h3><ul><li><ol><li>同步代码块</li></ol></li><li><p>特点</p><ul><li></li><li><p>使用</p></li><li><p>格式</p><ul><li></li><li><p>示例</p></li><li></li></ul></li><li><p>注意</p></li><li><p>锁可以为任意对象，但必须是唯一的（static），否则锁将无意义，一般用当前类的字节码对象</p><ul><li>当 synchronized 代码块中发生异常时会释放锁</li></ul></li></ul></li><li><ol start="2"><li>同步方法</li></ol></li><li><p>特点</p><ul><li><p>不加 synchronzied 的方法就好比不遵守规则的人，不去老实排队</p></li><li><p>加载实例方法上</p><ul><li>加载静态方法上</li></ul></li><li><p>使用</p></li><li><p>格式</p><ul><li></li><li><p>示例</p></li><li><p>StringBuffer 与 StringBuilder 的所有方法唯一的区别是 StringBuffer 上的所有方法是同步方法，因此多线程场景下使用 StringBuffer</p></li><li><p>细节</p></li><li><p>不知道什么时候写同步方法时，可先写同步代码块，再将同步代码块抽取成同步方法</p></li></ul></li><li><p>注意</p></li><li><p>同步非静态方法的锁对象为 this，因此若创建多个线程对象时锁失效（继承 Thread 类方式创建线程），必须改为创建一个线程对象多线程执行（实现 Runnable 接口方式）</p></li></ul></li><li><ol start="12"><li>锁升级机制</li></ol></li><li><p>对象头</p><ul><li><p>对象头组成</p><ul><li><ul><li><p>MarkWord</p></li><li></li></ul></li></ul></li><li><p>monitor 重量级锁</p></li><li></li><li><p>轻量级锁&amp; CAS 自旋</p></li><li><ol><li><p>设计目的</p><ul><li>如果一个对象虽然有多线程获取同一把锁，但获取的时间是错开的（也就是没有竞争），那么可以使用轻量级锁来优化</li></ul></li></ol><ul><li><ol start="2"><li>加锁流程</li></ol></li><li><p>更详细的流程参考 pdf 笔记</p></li><li><ol start="3"><li>解锁流程</li></ol></li><li><p>1</p><ul><li>2</li></ul></li><li><ol start="4"><li>锁膨胀</li></ol></li><li><p>如果在尝试加轻量级锁的过程中，CAS 操作无法成功，这时一种情况就是有其它线程为此对象加上了轻量级锁 （有竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁。</p><ul><li></li><li></li></ul></li><li><ol start="5"><li>锁重入</li></ol></li><li></li><li><ol start="6"><li>自旋优化</li></ol></li><li><p>设计目的</p><ul><li><p>重量级锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（即这时候持锁线程已经退出了同步块，释放了锁），这时当前线程就可以避免阻塞，从而避免上下文切换，提高性能</p></li><li><p>执行流程</p></li><li><p>自旋失败的情况</p><ul><li>自旋成功的情况</li></ul></li><li><p>注意事项</p></li><li></li><li><p>自旋次数</p></li><li><p>HotSpot JVM 中，自旋次数默认是 10 次</p></li></ul></li></ul></li><li><p>偏向锁</p></li><li><p>设计目的</p><ul><li><p>Java 6 中引入了偏向锁来做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后发现这个线程 ID 是自己的就表示没有竞争，不用重新 CAS（因为对象头不变）。以后只要不发生竞争，这个对象就归该线程所有，因此得名偏向锁</p></li><li><p>对比轻量级锁</p></li><li><ul><li></li></ul></li><li><p>加锁流程</p></li><li><ul><li>处于偏向锁的对象解锁后，线程 id 仍存储于对象头中</li></ul></li><li><p>撤销锁情况</p></li><li><ol><li>调用了对象的 hashCode。偏向锁的对象 MarkWord 中存储的是线程 id，如果调用 hashCode 会导致偏向锁被撤销。 轻量级锁会在锁记录中记录 hashCode； 重量级锁会在 Monitor 中记录 hashCode；</li></ol><ul><li><ol start="2"><li>当有其它线程使用偏向锁对象时，会将偏向锁升级为轻量级锁</li></ol></li><li><ol start="3"><li>调用 wait/notify</li></ol></li></ul></li><li><p>批量重偏向</p></li><li></li><li><p>批量撤销</p></li><li></li><li><p>注意事项</p></li><li></li></ul></li><li><p>锁消除优化</p></li><li><p>有时候没有必要对代码块添加 synchronized（如对局部变量做保护），JIT 会将锁优化掉，相当于消除了 synchronized 关键字。</p></li><li><p>synchronized 上锁总体流程</p></li><li></li></ul></li></ul><h3 id="_4-volatile" tabindex="-1"><a class="header-anchor" href="#_4-volatile"><span>4. volatile</span></a></h3><ul><li><ol><li>简介及使用</li></ol></li><li><p>它可以用来修饰成员变量和静态成员变量，他可以避免线程从自己的工作缓存中查找变量的值，必须到主存中获取它的值，线程操作 volatile 变量都是直接操作主存</p></li><li><p>应用</p></li><li><p>保证变量可见性</p><ul><li><p>使用前提</p><ul><li><ol><li><p>共享变量</p><ul><li><ol start="2"><li>多线程并发场景</li></ol></li><li><ol start="3"><li>不在临界区（不保证原子性）</li></ol></li></ul></li></ol><ul><li><p>使用方式</p></li><li><p>修饰可能发生不可见的共享变量</p></li></ul></li></ul></li><li><p>禁止指令重排序</p></li></ul></li><li><p>原理</p></li><li><ul><li><p>如何保证可见性</p></li><li><p>写</p><ul><li>读</li></ul></li><li><p>如何保证有序性</p></li><li><p>写</p><ul><li>读</li></ul></li></ul></li></ul><h3 id="_5-等待唤醒机制" tabindex="-1"><a class="header-anchor" href="#_5-等待唤醒机制"><span>5. 等待唤醒机制</span></a></h3><p>（wait&amp;notify）</p><ul><li><p>简介&amp;原理</p></li><li><p>目的</p><ul><li><p>条件不满足时进入等待状态（WAITING），并释放锁供其他线程使用，直到被其他线程唤醒</p></li><li><p>原理</p></li><li></li></ul></li><li><p>条件</p></li><li><ol><li>需要结合 synchronized 使用，因为当线程被 notify 唤醒后还需要获得其 synchronized 中 的锁才可往下运行，而不是立即运行</li></ol><ul><li><ol start="2"><li>synchronized、wait 和 notify 必须作用于同一个锁对象， 否则可能会抛出 IllegalMonotorStateException 异常</li></ol></li></ul></li><li><p>API</p></li><li><p>obj.wait(long n) 有时限的等待, 到 n 毫秒后结束等待，或是被 notify</p></li><li><p>sleep(long n)&amp;wait(long n)</p></li><li><ol><li>sleep 是 Thread 方法，而 wait 是 Object 的方法</li></ol><ul><li><ol start="2"><li>sleep 不需要强制和 synchronized 配合使用，但 wait 需要和 synchronized 一起用</li></ol></li><li><ol start="3"><li>sleep 在睡眠的同时，不会释放对象锁的，但 wait 在等待的时候会释放对象锁</li></ol></li><li><ol start="4"><li>他们的状态都是 TIME_WAITING</li></ol></li></ul></li><li><p>解决 notifyAll 虚假唤醒</p></li><li><p>问题：使用 notifyAll 唤醒了不该唤醒的线程</p><ul><li>解决：判断条件由 if 换成 while</li></ul></li></ul><h3 id="_6-线程安全四大特性" tabindex="-1"><a class="header-anchor" href="#_6-线程安全四大特性"><span>6. 线程安全四大特性</span></a></h3><ul><li><p>原子性</p></li><li><p>临界区内的代码对外是不可分割的，不会被线程切换所打断</p></li><li><p>活跃性</p></li><li><ol><li><p>死锁</p><ul><li><p>简介</p></li><li><p>嵌套使用锁时，可能出现程序不能往下执行的现象（线程 1 持有锁 A，等待锁 B，线程 2 持有锁 B，等待锁 A）</p></li><li><p>原则</p></li><li><p>只要不嵌套使用锁，就不会出现死锁</p></li><li><p>示例</p></li><li></li><li><p>检测死锁工具</p></li><li><p>[jstack](file:D:\\java\\笔记\\并发编程笔记\\并发编程笔记\\并发编程.pdf)</p><ul><li>jconsole</li></ul></li></ul></li></ol><ul><li><ol start="2"><li>活锁</li></ol></li><li><p>介绍</p><ul><li><p>活锁出现在两个线程互相改变对方的结束条件，最后谁也无法结束</p></li><li><p>解决</p></li><li><p>确保两个线程修改共享变量的频率不同</p></li><li><p>示例</p></li><li><p>线程 A 每隔 1 秒对共享变量 count--，直到 count &gt;= 0（结束条件）; 线程 B 每隔 1 秒对共享变量 count++，直到 count &lt; 20（结束条件）； A、B 线程同时运行会发生活锁 解决：让修改 count 的频率不同，如 A 隔 0.5、B 隔 1 秒</p></li></ul></li><li><ol start="3"><li>饥饿</li></ol></li><li></li></ul></li><li><p>可见性</p></li><li><p>问题</p><ul><li></li><li><p>原因</p></li><li><p>因为 t 线程要频繁从主内存中读取 run 的值，JIT 编译器会将 run 的值缓存至自己工作内存中的高速缓存中，减少对主存中 run 的访问，提高效率，但这导致了主线程对 run 的修改对 t 线程不可见</p></li><li><p>解决</p></li><li><ol><li><p>synchronized ReentrantLock</p><ul><li></li></ul></li></ol><ul><li><ol start="2"><li>volatile</li></ol></li><li><p>只保证可见性，不保证原子性</p></li></ul></li></ul></li><li><p>有序性</p></li><li><p>有序性引发的问题 1</p><ul><li><p>问题</p><ul><li><p>由共享变量指令重排序引发的问题</p><ul><li><p>原因</p></li><li></li></ul></li></ul></li><li><p>有序性引发的问题 2</p></li><li><p>问题</p><ul><li><p>由创建对象给共享变量赋值引发的问题 （DCL 单例优化为例）</p></li><li><p>原因</p></li><li></li><li><p>解决</p></li><li><p>在 INSTANCE 共享变量上加 volatile 关键字</p></li></ul></li><li><p>保证代码块有序性方法</p></li><li><p>volatile</p><ul><li>重量级锁（前提是共享变量完全被 synchronized 管理）</li></ul></li></ul></li><li><p>happens-before</p></li><li><p>简介</p><ul><li><p>happens-before 规定了对共享变量的写操作对其它线程的读操作可见，它是可见性与有序性的一套规则总结。（可见可以理解为可以看见） 抛开以下 happens-before 规则，JMM 并不能保证一个线程对共享变量的写，对于其它线程对该共享变量的读可见</p></li><li><p>规则</p></li><li><ol><li>线程解锁 M 之前对变量的写，对于接下来对 M 加锁的其它线程对该变量的读可见（就是对共享变量的读和写操作都加了锁）</li></ol><ul><li><ol start="2"><li>线程对 volatile 变量的写，对接下来其它线程对该变量的读可见</li></ol></li><li><ol start="3"><li>对变量默认值（0，false，null）的写，对其它线程对该变量的读可见</li></ol></li><li><ol start="4"><li>传递性：如果 x hb-&gt; y 并且 y hb-&gt; z 那么有 x hb-&gt; z</li></ol></li><li><ol start="5"><li>线程 start 前对变量的写，对该线程开始后对该变量的读可见（可以看到 start 前的写）</li></ol></li><li><ol start="6"><li>线程结束前对变量的写，对其它线程得知它结束后的读可见（比如其它线程调用 t1.isAlive() 或 t1.join()等待它结束）</li></ol></li><li><ol start="7"><li>线程 t1 打断 t2（interrupt）前对变量的写，对于其他线程得知 t2 被打断后对变量的读可见（通过 t2.interrupted 或 t2.isInterrupted 得知的）</li></ol></li></ul></li></ul></li></ul><h3 id="_7-案例分析" tabindex="-1"><a class="header-anchor" href="#_7-案例分析"><span>7. 案例分析</span></a></h3><ul><li><p>示例一：servlet 常见类型的成员变量</p></li><li></li><li><p>示例二：servlet 自定义类型的成员变量</p></li><li><p>在这个例子中需要对 update 方法上锁</p></li><li><p>示例二：SpringAOP 变量位置</p></li><li><p>添加其他可行的安全策略。在这个例子中应该将 start 编程 before 方法的局部变量</p></li><li><p>示例四：MVC 三层架构</p></li><li><p>Spring 框架中通过@Autowired 注解注入 bean 并不会创建 bean 的 setter 和 getter 方法，因此不存在框架调用 set 方法的情况</p><ul><li><p>这种写法存在线程安全问题（多线程并发修改，线程上下文切换导致）</p></li><li><p>这种写法是线程安全的，但不推荐</p></li></ul></li></ul><h3 id="_8-无状态类" tabindex="-1"><a class="header-anchor" href="#_8-无状态类"><span>8. 无状态类</span></a></h3><ul><li>若类中没有成员变量，则此类为线程安全的。如 servlet 类就不建议添加成员变量</li></ul><h3 id="_9-线程外变量问题" tabindex="-1"><a class="header-anchor" href="#_9-线程外变量问题"><span>9. 线程外变量问题</span></a></h3><ul><li></li></ul><h2 id="_6-无锁线程安全" tabindex="-1"><a class="header-anchor" href="#_6-无锁线程安全"><span>6. 无锁线程安全</span></a></h2><h3 id="_1-cas" tabindex="-1"><a class="header-anchor" href="#_1-cas"><span>1. CAS</span></a></h3><ul><li><p>简介</p></li><li><p>需要与 volatile 结合使用，才能保证共享变量可见性，从而实现乐观锁</p></li><li><p>特点</p></li><li><ul><li><p>效率与有锁对比</p></li><li><ol><li>无锁情况下，即使重试失败，线程始终在高速运行，没有停歇，而 synchronized 会让线程在没有获得锁的时候，发生上下文切换，进入阻塞。</li></ol><ul><li><ol start="2"><li>但无锁情况下，因为线程要保持运行，需要额外 CPU 的支持，虽然不会进入阻塞，但由于没有分到时间片，仍然会进入可运行状态，还是会导致上下文切换。因此使用无锁保证线程安全时需要保证线程数 &lt;= CPU 核数。</li></ol></li></ul></li></ul></li><li><p>使用</p></li><li><p>while (true){ XXX prev = xxx; XXX next = xxx; if(xxx.comapareAndSet（prev, next, ...）) break; }</p></li></ul><h3 id="_2-原子数据" tabindex="-1"><a class="header-anchor" href="#_2-原子数据"><span>2. 原子数据</span></a></h3><ul><li><ol><li>简介</li></ol></li><li><p>基于 CAS 和 volatile 实现的，封装了数据的原子操作</p></li><li><ol start="2"><li>原子整数</li></ol></li><li><ol><li><p>AtomicInteger</p><ul><li><ol><li>构造/获取</li></ol></li><li><p>AtomicInteger i = new AtomicInteger(10); int i1 = i.get();</p></li><li><ol start="2"><li>自增/自减</li></ol></li><li></li><li><ol start="3"><li>自定义计算</li></ol></li><li><p>使用</p><ul><li></li><li><p>原理</p></li><li></li></ul></li></ul></li></ol><ul><li><ol start="2"><li>AtomicBoolean</li></ol></li><li><p>使用类似 AtomicInteger</p></li><li><ol start="3"><li>AtomicLong</li></ol></li><li><p>使用类似 AtomicInteger</p></li></ul></li><li><p>3.原子引用</p></li><li><ol><li><p>AtomicReference</p><ul><li><p>特点</p></li><li><p>不关心修改前其他线程对共享变量的修改，只要修改前的值不变就可以成功修改</p></li><li><p>使用</p></li><li></li><li><p>示例</p></li><li><p>线程不安全实现</p><ul><li><p>线程不安全账户类</p></li><li><p>创建 1000 个线程同时对账号取款 10 元</p></li><li><p>CAS 安全实现</p></li><li><p>线程安全账户类</p><ul><li>创建 1000 个线程同时对账号取款 10 元</li></ul></li><li><p>锁安全实现...</p></li></ul></li></ul></li></ol><ul><li><ol start="2"><li>AtomicStampedReference</li></ol></li><li><p>特点</p><ul><li><p>加入了版本号，修改过程中需要判断版本号是否一致来确认是否修改成功</p></li><li><p>使用</p></li><li><p>构造方法：</p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">AtomicStampedReference</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> s</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> AtomicStampedReference</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;&gt;(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">aaa</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre></div><ul><li><p>获取引用：String ref = s.getReference(); // &quot;aaa&quot;</p></li><li><p>获取版本：int v = s.getStamp(); // 0</p></li><li><p>CAS： s.compareAndSet(prev, next, stamp, stamp + 1)</p></li></ul></li><li><p>示例</p></li><li></li></ul></li><li><ol start="3"><li>AtomicMarkableReference</li></ol></li><li><p>特点</p><ul><li><p>加入了真假标记，修改过程中需要比对标记来确认是否修改成功</p></li><li><p>使用</p></li><li></li></ul></li><li><p>注意：原子引用在 CAS 时只能比较对象引用地址，不能比较里面的内容</p></li></ul></li><li><ol start="4"><li>原子数组</li></ol></li><li><p>AtomicIntegerArray</p><ul><li><p>使用</p><ul><li><p>构造： new AtomicIntegerArray(10)；// 创建元素个数为 10 的整数数组</p><pre><code>- API ：

	-
</code></pre><ul><li><p>示例</p></li><li><ul><li><p>线程不安全数组</p></li><li><p>线程安全数组</p></li></ul></li></ul></li></ul></li><li><p>AtomicLongArray</p></li><li><p>使用类似 AtomicIntegerArray</p></li><li><p>AtomicReferenceArray</p></li><li><p>使用类似 AtomicIntegerArray</p></li></ul></li><li><ol start="5"><li>字段更新器</li></ol></li><li><p>简介</p><ul><li><p>利用字段更新器，可以针对对象的某个域（Field）进行原子操作，只能配合 volatile 修饰的字段使用，否则会出现异常：IllegalArgumentException: Must be volatile type</p></li><li><p>AtomicReferenceFieldUpdater</p></li><li><p>说明</p><ul><li><p>字段是引用类型</p></li><li><p>使用</p></li><li><p>cas 方法返回的都是 boolean</p></li></ul></li><li><p>AtomicIntegerFieldUpdater</p></li><li><p>说明：字段必须是整形</p><ul><li>使用类似 AtomicReferenceFieldUpdater</li></ul></li><li><p>AtomicLongFieldUpdater</p></li><li><p>说明：字段必须是长整型</p><ul><li>使用类似 AtomicReferenceFieldUpdater</li></ul></li></ul></li><li><ol start="6"><li>原子累加器</li></ol></li><li><p>简介</p><ul><li></li><li><p>原理</p></li><li><p>[LongAdder 源码](file:D:\\java\\笔记\\并发编程笔记\\并发编程笔记\\并发编程.pdf)</p></li><li><p>使用</p></li><li><p>LongAdder longAdder = new LongAdder(); // 初始化值为 1 的 long longAdder.increment(); // 值+1</p><ul><li>DoubleAdder 类似</li></ul></li></ul></li><li><ol start="7"><li>BigDecimal</li></ol></li><li><p><a href="https://blog.csdn.net/qq_40068304/article/details/124580066" target="_blank" rel="noopener noreferrer">网页</a></p></li></ul><h3 id="_3-unsafe" tabindex="-1"><a class="header-anchor" href="#_3-unsafe"><span>3. unsafe</span></a></h3><ul><li><p>简介</p></li><li><p>Unsafe 对象提供了非常底层的，操作内存、线程的方法，Unsafe 对象不能直接调用，只能通过反射获得</p></li><li><p>使用</p></li><li><ol><li>创建获取 unsafe 对象的工具类</li></ol><ul><li><ol start="2"><li>获取字段偏移量对字段进行 CAS 修改</li></ol></li></ul></li><li><p>示例</p></li><li><p>[自定义原子整数](file:D:\\java\\mycode\\JavaThread\\CAS-demo\\src\\main\\java\\unsafe\\MyAtomicInteger.java)</p><ul><li>[将此原子整数用于原子引用示例的 Account 上](file:D:\\java\\mycode\\JavaThread\\CAS-demo\\src\\main\\java\\AtomicRef\\AtomicReferenceDemo.java)</li></ul></li></ul><h3 id="_4-final-原理" tabindex="-1"><a class="header-anchor" href="#_4-final-原理"><span>4. final 原理</span></a></h3><ul><li><p>设置 final 变量</p></li><li><p>在赋值指令后加入写屏障</p></li><li><p>获取 final 变量</p></li><li><p>读取时若数据较小则从栈中获取 (bipush 指令) 读取时若数据较大则从常量池中获取(ldc 指令)</p></li></ul><h3 id="_7-cas-与锁比较" tabindex="-1"><a class="header-anchor" href="#_7-cas-与锁比较"><span>7. CAS 与锁比较</span></a></h3><ul><li><p>适用场景（一般情况）</p></li><li><p>锁</p><ul><li></li><li><p>CAS</p></li><li></li><li><p>根据不同的适用场景，锁和 CAS 可以结合适用，相辅相成</p></li></ul></li><li><p>性能</p></li><li><p>锁粒度小 &gt; 锁粒度大</p><ul><li>CAS 依赖于硬件支持，硬件好的话并发性能会提升较大</li></ul></li></ul><h2 id="_7-线程池" tabindex="-1"><a class="header-anchor" href="#_7-线程池"><span>7. 线程池</span></a></h2><h3 id="_1-简介-2" tabindex="-1"><a class="header-anchor" href="#_1-简介-2"><span>1. 简介</span></a></h3><ul><li><p>概念</p></li><li><p>存放线程的容器，一般用来处理异步任务</p></li><li><p>原理</p></li><li><ul><li>注意：用指定线程池大小的方法创建 pool 时，当池子满时才会复用线程，否则不管 pool 中是否有空闲线程都会创建线程执行新任务</li></ul></li></ul><h3 id="_2-应用" tabindex="-1"><a class="header-anchor" href="#_2-应用"><span>2. 应用</span></a></h3><ul><li><ol><li>处理异步任务（ThreadPoolExecutor）</li></ol></li><li><ol start="2"><li>处理定时任务（实现见 PDF）、延时任务、延时重复任务（ScheduleThreadPool）</li></ol></li></ul><h3 id="_3-原理" tabindex="-1"><a class="header-anchor" href="#_3-原理"><span>3. 原理</span></a></h3><ul><li><p>ThreadPoolExecutor</p></li><li><p>状态</p><ul><li></li><li><p>执行流程</p></li><li></li><li><p>构造方法</p></li><li></li><li><p>拒绝策略</p></li><li><p>AbortPolicy ： 让调用者抛出 RejectedExecutionException 异常，这是默认策略 CallerRunsPolicy ：让调用者运行任务 DiscardPolicy ： 放弃本次任务 DiscardOldestPolicy ：放弃队列中最早的任务，本任务取而代之</p></li></ul></li><li><p>Tomcat 线程池</p></li><li><p>配置</p><ul><li><p>默认 Connector 配置</p><ul><li><ul><li><p>打开 Executor 配置</p></li><li></li></ul></li></ul></li><li><p>原理</p></li><li></li><li><p>流程</p></li><li><p>对阻塞队列做了修改</p></li></ul></li></ul><h3 id="_4-使用步骤" tabindex="-1"><a class="header-anchor" href="#_4-使用步骤"><span>4 使用步骤</span></a></h3><ul><li><p>普通线程池</p></li><li><ol><li><p>创建线程池</p><ul><li><ol><li>Executors 创建线程</li></ol></li><li><p>newFixedThreadPool (int nThreads)</p><ul><li><p>适用</p><ul><li><p>固定线程的线程池：适用于任务数量已知，相对耗时的任务</p><ul><li><p>原理</p></li><li></li></ul></li></ul></li><li><p>newCachedThreadPool（）</p></li><li><p>适用</p><ul><li><p>缓冲线程池：适合任务数比较密集，但每个任务执行时间较短的情况</p></li><li><p>原理</p></li><li><p>整个线程池表现为线程数会根据任务量不断增长，没有上限，当任务执行完毕， 空闲 1 分钟后释放线程。</p></li></ul></li><li><p>newSingleThreadExecutor（）</p></li><li><p>说明</p><ul><li>单线程串行线程池：线程数固定为 1，任务数多于 1 时，会放入无界队列排队。任务执行完毕，这唯一的线程也不会被释放。任务出现异常导致线程终止时会重新创建一个线程执行后面的任务。</li></ul></li></ul></li></ul></li></ol></li></ul><p>适用场景：希望多个任务排队执行。</p><pre><code>			- 原理

				-

				- 与newFixedThreadPool( 1 ) 的区别

		- int num = Runtime.getRuntime().availableProcessors();    // 获取当前cpu可用线程数

	- 2. 创建JDK线程池对象

		-

		-  参数解释：

- 2. 提交任务

	- 提交一个任务

		- void execute(Runnable command) ；

			- 接收无返回结果的Runnable任务，无返回值

		- &lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task) ；

			- 接收有返回结果的Callable任务，返回执行结果

			- 通过Future对象的get方法阻塞获取执行结果

	- 提交列表任务

		- 返回所有线程执行结果

			- //  提交task中所有任务，返回所有任务的执行结果，元素的get阻塞获取

            \`\`\`java
            &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks) throws InterruptedException;
            \`\`\`


			- //  提交task中所有任务，返回所有任务的执行结果，元素的get阻塞获取，带超时时间
             \`\`\`java
            &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, long timeout, TimeUnit unit) throws InterruptedException;
            \`\`\`

		- 返回最先完成的任务结果

			- // 提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消
            \`\`\`java
            &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks) throws InterruptedException, ExecutionException;
            \`\`\`

			- // 提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消，带超时时间
            \`\`\`java
            &lt;T&gt; T invokeAny(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks, long timeout, TimeUnit unit)
            throws InterruptedException, ExecutionException, TimeoutException;
            \`\`\`

- [3]. 关闭线程池

	- void shutdown()

		-

	- List&lt;Runnable&gt; shutdownNow()

		-

	- boolean isShutdown()

		- 不在 RUNNING 状态的线程池，此方法就返回 true

	- boolean isTerminated()

		- 返回线程池状态是否为 TERMINATED

	- boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException

		- 调用 shutdown 后，由于调用线程并不会等待所有任务运行结束，因此如果它想在线程池 TERMINATED 后做些事情，可以利用此方法等待。
</code></pre><p>当然，很多时候不知道如何确定等待多久，因此可以用 shutdownNow 方法返回结果的 get 阻塞等待，从而达到所有线程执行完毕后才调用结束方法</p><ul><li><p>任务调度线程池</p></li><li><ol><li><p>创建线程池</p><ul><li>Executors.newScheduledThreadPool(int num) // 创建线程数固定的线程池</li></ul></li></ol><ul><li><ol start="2"><li>提交任务</li></ol></li><li><p>延时执行一次任务</p><ul><li><p>schedule（Runnable r, long delay, TimeUnit timeUnit）</p><ul><li><p>任务为 Runnable，无结果</p><div class="language-java" data-highlighter="shiki" data-ext="java" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ScheduledFuture</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> resultFuture</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> schedule（Callable</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">T</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> long</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> delay</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TimeUnit timeUnit）</span></span></code></pre></div><ul><li>任务为 Callable，result.get()获取结果; 当任务出现（抛出）异常时调用 result.get()会抛出异常。</li></ul></li></ul></li><li><p>延时重复执行任务</p></li><li><ul><li></li></ul></li></ul></li><li><ol start="3"><li>关闭线程池</li></ol></li><li><p>参考普通线程池</p></li></ul></li><li><p>ForkJoin 线程池</p></li><li><p>简介</p><ul><li>与普通线程池的区别</li></ul></li><li><p>注意：不同任务类型应该使用不同的线程池，这样能够避免饥饿，并能提升效率</p></li></ul><h3 id="_5-自定义线程池" tabindex="-1"><a class="header-anchor" href="#_5-自定义线程池"><span>5. 自定义线程池</span></a></h3><ul><li>[包括自定义阻塞队列、拒绝策略](file:D:\\java\\mycode\\JavaThread\\ThreadPool\\src\\com)</li></ul><h3 id="_6-异常处理" tabindex="-1"><a class="header-anchor" href="#_6-异常处理"><span>6. 异常处理</span></a></h3><ul><li><ol><li>在任务中主动捕获处理</li></ol></li><li><ol><li>对任务中捕获异常时不要抛出 RuntimeException 异常。否则： Runnable 接口不能获取（打印）异常信息，将导致异常信息消失； Callable 接口需要调用 Future 的 get 方法才抛出异常。</li></ol></li></ul><ol start="2"><li>最好捕获所有任务代码，不然没有捕获的地方出现异常时将导致异常消失</li></ol><ul><li><ol start="2"><li>Futrue 的 get 方法处理</li></ol></li><li><ol><li>不捕获任务的异常。</li></ol></li></ul><ol start="2"><li>任务类型必须为 Callable，且必须要调用 Future 的 get 方法。否则无法获取异常信息</li></ol><h3 id="_7-线程池多大合适" tabindex="-1"><a class="header-anchor" href="#_7-线程池多大合适"><span>7. 线程池多大合适</span></a></h3><ul><li><p>CPU 密集型</p></li><li><p>公式</p><ul><li></li><li><p>应用场景</p></li><li><p>数据分析等业务。+1 是保证当线程由于页缺失故障（操作系统）或其它原因导致暂停时，额外的这个线程就能顶上去，保证 CPU 时钟周期不被浪费</p></li></ul></li><li><p>I/O 密集型</p><ul><li><p>公式</p></li><li></li><li><p>应用场景</p></li><li><p>大部分 web 业务</p></li><li><p>示例</p></li><li></li></ul></li></ul><h3 id="_8-闭包问题" tabindex="-1"><a class="header-anchor" href="#_8-闭包问题"><span>8.闭包问题</span></a></h3><ul><li></li></ul><h2 id="_8-juc-并发工具" tabindex="-1"><a class="header-anchor" href="#_8-juc-并发工具"><span>8. JUC 并发工具</span></a></h2><h3 id="_1-aqs" tabindex="-1"><a class="header-anchor" href="#_1-aqs"><span>1. AQS</span></a></h3><ul><li><p>定义</p></li><li><p>一个抽象类，是阻塞式锁和相关的同步器工具的框架</p></li><li><p>规定</p></li><li><p>线程阻塞和唤醒（await&amp;signal）是通过 park 和 unPark 实现的</p></li><li><p>子类</p></li><li><p>需要维护 state 这个状态来控制如何获取锁和释放锁、独占锁还是共享锁。 一般需要重写下列 5 个方法来实现：（与 shared 相关的方法用于实现读写锁）</p><ul><li></li><li><p>示例</p></li><li><p>用于实现不可重入独占锁</p></li></ul></li><li><p>API</p></li><li><p>注意：这里指 AQS 默认提供的 API</p><ul><li><p>acquire</p></li><li><p>多次调用 tryAcquire 尝试加锁，失败则将线程放入等待队列</p></li><li><p>release</p></li><li><p>调用 tryRelease 尝试释放锁，并唤醒等待线程</p></li></ul></li></ul><h3 id="_2-reentrantlock" tabindex="-1"><a class="header-anchor" href="#_2-reentrantlock"><span>2. ReentrantLock</span></a></h3><ul><li><p>简介</p></li><li><p>lock 锁</p><ul><li><ul><li></li></ul></li><li><p>对比 synchronized</p></li><li></li></ul></li><li><p>语法</p></li><li><p>static ReentrantLock lock = new ReentrantLock(); //创建锁对象</p></li><li><p>原理</p></li><li><p>图示</p><ul><li><p>默认使用公平锁（NonfairSync）</p></li><li><p>加锁解锁原理</p></li><li><p>通过维护 AQS 中的下述几个状态来实现所有锁功能</p><ul><li><p>不可打断原理</p></li><li><p>执行 uppark 后被打断线程还是会继续通过不断循环判断 state 状态是否为 1 来维持不可打断</p></li><li><p>可打断原理</p></li><li><p>执行 uppark 后被打断线程直接抛出异常来实现打断</p></li><li><p>可重入原理</p></li><li><p>判断 exclusiveOwnerThread 是否为自身线程来实现</p></li><li><p>非公平锁原理</p></li><li><p>tryAcquire 方法：在枪锁时不必判断阻塞队列（双向链表）中是否存在阻塞线程，直接枪锁</p></li><li><p>公平锁原理</p></li><li><p>tryAcquire 方法：抢锁时判断阻塞队列中没有阻塞线程才去枪锁</p></li></ul></li><li><p>等待唤醒原理</p></li><li><p>维护 ConditionObject 对象中的等待队列（双向链表）与 AQS 中的几个状态的交互来来实现</p></li></ul></li><li><p>设置为可中断</p></li><li></li><li><p>设置为公平锁</p></li><li><p>static ReentrantLock lock = new ReentrantLock(true);</p><ul><li>说明：公平锁可以避免饥饿，但一般没有必要，会降低并发度</li></ul></li><li><p>设置锁超时时间</p></li><li><p>立刻失败</p><ul><li></li><li><p>超时失败</p></li><li></li></ul></li><li><p>设置条件变量</p></li><li><p>使用要点</p><ul><li><p>使用 signal 前也需要获取锁</p></li><li><p>API</p></li><li><p>等待： void await() ：一直等待 boolean await（long time, TimeUnit unit）：计时等待，时间到返回 false，时间没到就被唤醒返回 true long awaitNanos(long nanos) ：计时等待，被唤醒时返回剩余等待时长，时间到返回 0 或小于 0</p><ul><li>唤醒： signal() signalAll()</li></ul></li><li><p>使用步骤</p></li><li><ol><li>创建房间锁 (lock) 和休息室（newCondition）</li></ol><ul><li><ol start="2"><li>条件等待 [ await（long time, TimeUnit unit）：计时等待 ]</li></ol></li><li><ol start="3"><li>唤醒</li></ol></li></ul></li><li><p>[示例](file:D:\\java\\mycode\\JavaThread\\ThreadSecurity\\src\\main\\java\\reentrantLock\\ConditionWait.java)</p></li></ul></li></ul><h3 id="_3-读写锁" tabindex="-1"><a class="header-anchor" href="#_3-读写锁"><span>3. 读写锁</span></a></h3><ul><li><p>定义</p></li><li><ol><li>允许读并发，提高读-读性能。即只有读--读不会阻塞；读--写、写--读、写--写才会阻塞</li></ol><ul><li><ol start="2"><li>读锁不支持条件变量</li></ol></li><li><ol start="3"><li>重入时不允许锁升级，但允许锁降级。即先获取读锁再获取写锁时会导致死锁；反之则不会</li></ol></li></ul></li><li><p>实现</p></li><li><ol><li><p>ReentrantReadWriteLock</p><ul><li><p>定义读写锁</p></li><li><p>如何使用：API 和 ReentrantLock 差不多</p></li><li><p>原理：基于 AQS，详情见 PDF 笔记</p></li></ul></li></ol><ul><li><ol start="2"><li>StampedLock</li></ol></li><li><p>特点</p><ul><li><ol><li>提供了乐观读的操作，提高了并发读性能</li></ol></li><li><ol start="2"><li>不支持条件变量</li></ol><ul><li><ol start="3"><li>不支持可重入</li></ol></li></ul></li><li><p>使用</p></li><li><p>使用 AQS 锁</p><ul><li></li><li><p>使用乐观读锁</p></li><li></li></ul></li><li><p>注意</p></li><li><p>乐观读锁并不能阻塞写锁，因为他并不是一个真正的锁，要实现读写之间的阻塞还得使用 AQS 的读写锁</p></li></ul></li></ul></li><li><p>应用</p></li><li><p>缓存更新策略</p><ul><li><p>并发读取问题</p><ul><li><p>问题描述</p><pre><code>	- （查询缓存是否有数据） 与 （从数据库查询数据并存入缓存中存在竞态条件），导致后者重复执行

- 读锁解决

	-
</code></pre><ul><li><p>并发修改问题</p></li><li><p>问题描述</p><ul><li><ol><li>先清缓存再更新数据库</li></ol><ul><li><p>导致数据永久（不考虑 key 过期）不一致</p><ul><li><ol start="2"><li>先更新数据库再清缓存</li></ol></li><li><p>导致数据短暂不一致</p></li></ul></li></ul></li><li><p>读锁解决</p></li><li></li></ul></li><li><p>需要考虑的问题</p></li><li></li></ul></li></ul></li></ul></li></ul><h3 id="_4-semaphore" tabindex="-1"><a class="header-anchor" href="#_4-semaphore"><span>4. semaphore</span></a></h3><ul><li><p>定义</p></li><li><p>用来限制能同时访问共享资源的线程上限</p></li><li><p>使用</p></li><li></li><li><p>应用</p></li><li></li><li><p>原理</p></li><li><p>基于 AQS（通过 state 计数实现），具体见 PDF</p></li></ul><h3 id="_5-countdownlatch" tabindex="-1"><a class="header-anchor" href="#_5-countdownlatch"><span>5. CountdownLatch</span></a></h3><ul><li><p>定义</p></li><li><p>用来进行线程同步协作，等待所有线程完成倒计时，可以比喻为王者 10 个人加载完成才能开启游戏</p></li><li><p>使用</p></li><li><p>构造参数用来初始化等待计数值 ： CountDownLatch latch = new CountDownLatch(3); await()方法用来阻塞等待计数归零： latch.await(); countDown()方法用来让计数减 ： latch.countDown();</p></li><li><p>原理</p></li><li><p>基于 AQS，具体见 PDF</p></li><li><p>应用</p></li><li><p>等待线程池任务执行完毕再结束主线程</p><ul><li><ul><li></li></ul></li><li><p>等待无返回值的远程调用的结果</p></li><li><p>在微服务架构下在一个方法中执行多个远程调用时可以使用线程池执行异步操作而非进行串行同步调用，节省执行时间。CountdownLatch 则可以等待无返回结果的多线程执行结束</p></li></ul></li><li><p>注意</p></li><li><p>如果线程有返回值（Callable），则使用 Future.get 方法替代 CountdownLatch</p></li></ul><h3 id="_6-cyclicbarrier" tabindex="-1"><a class="header-anchor" href="#_6-cyclicbarrier"><span>6. CyclicBarrier</span></a></h3><ul><li><p>定义</p></li><li><p>每个线程执行到某个需要“同步”的时刻调用 await() 方法进行等待，当等待的线程数满足『计数个数』时，继续执行，可以被比喻为『人满发车』，并且其『计数个数』可重用。</p></li><li><p>使用</p></li><li><p>创建 CyclicBarrier 对象时也可以只有第一个参数</p><ul><li>执行结果</li></ul></li></ul><h3 id="_7-completablefutrue" tabindex="-1"><a class="header-anchor" href="#_7-completablefutrue"><span>7. CompletableFutrue</span></a></h3><ul><li><p>简介</p></li><li><ul><li>使用 forkjoin 线程池</li></ul></li><li><p>实例</p></li><li><p>可以替代线程池+countDownLauch</p></li></ul><h2 id="_9-线程安全集合类" tabindex="-1"><a class="header-anchor" href="#_9-线程安全集合类"><span>9. 线程安全集合类</span></a></h2><h3 id="_1-遗留集合类" tabindex="-1"><a class="header-anchor" href="#_1-遗留集合类"><span>1. 遗留集合类</span></a></h3><ul><li><p>简介：过时的线程安全类，里面的所有方法都加了 synchronized 锁</p></li><li><ol><li>Vector</li></ol></li><li><ol start="2"><li>HashTable</li></ol></li></ul><h3 id="_2-包装集合类" tabindex="-1"><a class="header-anchor" href="#_2-包装集合类"><span>2. 包装集合类</span></a></h3><ul><li><p>简介：通过 Collections 工具类中 synchronized 开头的方法将线程不安全的 集合类装饰成线程安全的集合类，这些类里面的所有方法都加了锁。</p></li><li><p>XXX xxx = Collections.synchronizedXXX（XXX）; （只能通过此工具类获取，因为返回的是一个私有静态内部类）</p></li></ul><h3 id="_3-juc-集合类" tabindex="-1"><a class="header-anchor" href="#_3-juc-集合类"><span>3. JUC 集合类</span></a></h3><ul><li><p>Blocking 阻塞队列</p></li><li><p>简介</p><ul><li><p>大部分实现基于粒度较小的锁，并提供用来阻塞的方法</p></li><li><p>LinkedBlockingQueue</p></li><li><ol><li>两把锁，同一时刻，可以允许两个线程同时（一个生产者与一个消费者）执行</li></ol><ul><li><ol start="2"><li>dummy 节点的引入让两把锁将来锁住的是不同对象，避免竞争</li></ol></li><li><ol start="3"><li>里面的两把锁使用 ReentrantLock 实现</li></ol></li></ul></li><li><p>ArrayBlockingQueue</p></li><li><p>LinkedBlockingQueue 性能更好</p></li></ul></li><li><p>ConcurrentXXX</p></li><li><p>简介</p><ul><li></li><li><p>ConcurrentHashMap</p></li><li><p>特有方法 1：computeIfAbsent</p><ul><li>特有方法 2：</li></ul></li><li><p>ConcurrentLinkedQueue</p></li><li><p>功能与 LinkedBlockingQueue 一样，不同点在于其里面的锁使用 CAS 实现，并发度更大时性能更好，Tomcat 用到的就是此阻塞队列</p></li></ul></li><li><p>CopyOnWriteXXX</p></li><li><p>简介</p><ul><li><p>基于读写分离的思想，在写操作时会将原来的集合给拷贝一份，然后在新的集合上修改。读取数据时不加锁，适用于读多写少的场景，也会存在弱一致性的问题。</p></li><li><p>CopyOnWriteArrayList</p></li><li><p>简介：增删改操作会将底层数组拷贝一份，更改操作在新数组上执行，这时不影响其它线程的并发读，读写分离，适用于读多写少的场景</p></li><li><p>CopyOnWriteArraySet</p></li><li><p>简介：底层调用 CopyOnWriteArrayList 中的方法，实现 Set 接口，行驶 Set 功能</p></li></ul></li></ul><h2 id="_10-设计模式" tabindex="-1"><a class="header-anchor" href="#_10-设计模式"><span>10. 设计模式</span></a></h2><h3 id="同步模式" tabindex="-1"><a class="header-anchor" href="#同步模式"><span>同步模式</span></a></h3><ul><li><p>两阶段终止</p></li><li><p>简介</p><ul><li><p>目的：优雅的终止线程</p></li><li><p>流程图</p></li><li></li><li><p>代码</p></li><li><ol><li><p>创建任务线程</p><ul><li></li></ul></li></ol><ul><li><ol start="2"><li>开启任务线程</li></ol></li><li><p>t1.start()</p></li><li><ol start="3"><li>打断任务线程</li></ol></li><li></li></ul></li></ul></li><li><p>保护性暂停</p></li><li><p>两个线程</p><ul><li><p>简介</p><ul><li><ul><li><p>代码</p></li><li><p>D:\\java\\mycode\\JavaThread\\design-mode\\src\\main\\java\\com\\mode</p></li></ul></li></ul></li><li><p>多个线程</p></li><li><p>简介</p><ul><li><p>图中 Futures 就好比居民楼一层的信箱（每个信箱有房间编号），左侧的 t0，t2，t4 就好比等待邮件的居民，右侧的 t1，t3，t5 就好比邮递员。如果需要在多个类之间使用 GuardedObject 对象，作为参数传递不是很方便，因此设计一个用来解耦的中间类，这样不仅能够解耦【结果等待者】和【结果生产者】，还能够同时支持多个任务的管理</p></li><li><p>代码</p></li><li><p>D:\\java\\mycode\\JavaThread\\design-mode\\src\\main\\java\\com\\mode\\GuardedSuspensionExt</p></li></ul></li><li><p>特点</p></li><li><p>产生结果的线程和接收结果的线程是一一对应的</p></li></ul></li><li><p>顺序控制&amp; 交替执行</p></li><li><p>synchronized 实现（wait&amp;notify）</p><ul><li><p>ReentrantLock 实现（tryLock）</p></li><li><p>park&amp;unPark 实现</p></li><li><p>[见笔记](file:D:\\java\\笔记\\并发编程笔记\\并发编程笔记\\并发编程_模式.pdf)</p></li></ul></li><li><p>犹豫模式</p></li><li><p>保证方法只执行一遍</p><ul><li><p>由 synchronized 保证原子性和可见性</p></li><li><p>由 volatile 保证可见性</p></li><li><p>实现线程安全的单例</p></li><li></li></ul></li></ul><h3 id="异步模式" tabindex="-1"><a class="header-anchor" href="#异步模式"><span>异步模式</span></a></h3><ul><li><p>生产者消费者</p></li><li><p>简介</p><ul><li></li><li><p>代码</p></li></ul></li><li><p>工作线程/ 分工模式</p></li><li><p>定义</p><ul><li></li><li><p>代码</p></li><li></li></ul></li></ul><h3 id="待归纳" tabindex="-1"><a class="header-anchor" href="#待归纳"><span>待归纳...</span></a></h3><ul><li><p>生产者消费者</p></li><li><p>步骤</p><ul><li><ol><li>创建管理者对象，管理锁、交替执行次数</li></ol><ul><li><ul><li><ol start="2"><li>创建生产者线程，执行生产者逻辑</li></ol></li><li></li><li><ol start="3"><li>创建消费者线程，执行消费者逻辑</li></ol></li><li></li><li><ol start="4"><li>创建生产者与消费者线程并执行</li></ol></li><li></li></ul></li></ul></li><li><p>示例</p></li><li><p>吃货与厨师</p><pre><code>-
</code></pre><ul><li><ol><li>创建厨师线程</li></ol></li><li></li><li><ol start="2"><li>创建吃货线程</li></ol></li><li></li><li><ol start="3"><li>创建桌子对象</li></ol></li><li></li><li><ol start="4"><li>启动线程</li></ol></li><li></li></ul></li><li><p>注意</p></li><li></li></ul></li><li><p>阻塞队列实现</p></li><li><p>简介</p><ul><li><p>等待机制+队列 = 阻塞队列</p></li><li></li><li><p>步骤</p></li><li><ol><li><p>创建数据线程共享管理对象</p><ul><li></li></ul></li></ol><ul><li><ol start="2"><li>创建生产者线程对象</li></ol></li><li></li><li><ol start="3"><li>创建消费者线程对象</li></ol></li><li></li><li><ol start="4"><li>启动生产者消费者线程</li></ol></li><li></li></ul></li><li><p>注意</p></li><li><ol><li>阻塞队列 put 和 take 方法已加锁，无需再手动编写同步代码，否则将出现锁嵌套</li></ol><ul><li><ol start="2"><li>输出日志可能无法呈现交替执行现象，是由于日志是在锁外层打印的，底层还是交替执行的</li></ol></li></ul></li></ul></li></ul><h3 id="享元模式" tabindex="-1"><a class="header-anchor" href="#享元模式"><span>享元模式</span></a></h3><ul><li><ol><li>简介</li></ol></li><li><p>作用</p><ul><li><p>主要用于减少创建对象的数量，以减少内存占用和提高性能</p></li><li><p>体现</p></li><li><ul><li>各种池：数据库连接池、线程池</li></ul></li></ul></li><li><ol start="2"><li>示例</li></ol></li><li><p>[自定义连接池](file:D:\\java\\mycode\\JavaThread\\CAS-demo\\src\\main\\java\\connectionPool)</p></li></ul><h3 id="_10-线程安全单例" tabindex="-1"><a class="header-anchor" href="#_10-线程安全单例"><span>10. 线程安全单例</span></a></h3><ul><li><p>饿汉式设计</p></li><li><p>readResolve 方法：反序列化时会调用此方法，若没有此方法则 NEW</p></li><li><p>枚举实现</p></li><li></li><li><p>懒汉式设计 ( DCL )</p></li><li></li><li><p>静态内部类</p></li><li></li></ul><h2 id="_11-开发原则" tabindex="-1"><a class="header-anchor" href="#_11-开发原则"><span>11. 开发原则</span></a></h2><h3 id="_1-判断当前类是单线程调用还是多线程调用。若单线程则调用不存在线程安全问题-否则进行下一步" tabindex="-1"><a class="header-anchor" href="#_1-判断当前类是单线程调用还是多线程调用。若单线程则调用不存在线程安全问题-否则进行下一步"><span>1. 判断当前类是单线程调用还是多线程调用。若单线程则调用不存在线程安全问题，否则进行下一步</span></a></h3><h3 id="_2-判断共享变量是否线程安全-代码块是否存在临界区及竞态条件-若不安全则进行下一步" tabindex="-1"><a class="header-anchor" href="#_2-判断共享变量是否线程安全-代码块是否存在临界区及竞态条件-若不安全则进行下一步"><span>2. 判断共享变量是否线程安全（代码块是否存在临界区及竞态条件），若不安全则进行下一步</span></a></h3><ul><li><p>线程绝对安全的情况</p></li><li><p>共享变量只读（即无修改方法，但不包括初始化方法） &amp;&amp; 为基本类型或字符串（线程安全类型）</p></li><li><p>局部变量线程不安全的情况</p></li><li><p>方法中存在多线程同时修改局部变量</p></li><li><p>形参线程不安全的情况</p></li><li><p>外星方法：子类重写的抽象方法中存在多个线程修改形参</p><ul><li>普通方法：方法中存在多线程修改形参</li></ul></li></ul><h3 id="_3-对共享变量进行保护-cas-或加锁-如果条件允许可以将共享变量替换为线程安全类" tabindex="-1"><a class="header-anchor" href="#_3-对共享变量进行保护-cas-或加锁-如果条件允许可以将共享变量替换为线程安全类"><span>3. 对共享变量进行保护（CAS 或加锁）；如果条件允许可以将共享变量替换为线程安全类</span></a></h3><ul><li>保护一个类中的属性性能要比保护一个类大得多</li></ul><h3 id="_4-实用技巧-结合字符串入池操作-str-intern-可以减少锁粒度。" tabindex="-1"><a class="header-anchor" href="#_4-实用技巧-结合字符串入池操作-str-intern-可以减少锁粒度。"><span>4. 实用技巧：结合字符串入池操作( str.intern() ) 可以减少锁粒度。</span></a></h3><pre><code>例如SpringMvc中将用户id转为字符串并执行入池，则可以限定只有当前用户才能获取锁
</code></pre><h2 id="_12-缩小锁粒度" tabindex="-1"><a class="header-anchor" href="#_12-缩小锁粒度"><span>12. 缩小锁粒度</span></a></h2><h3 id="_1-synchronized-字符串入池" tabindex="-1"><a class="header-anchor" href="#_1-synchronized-字符串入池"><span>1. Synchronized + 字符串入池</span></a></h3><ul><li>synchronized(str.intern)</li></ul><h3 id="_2-concurrenthashmap-reentrantlock" tabindex="-1"><a class="header-anchor" href="#_2-concurrenthashmap-reentrantlock"><span>2. ConcurrentHashMap + ReentrantLock</span></a></h3><ul><li>在 SpringMVC 中，方法可为 controller 中的方法： 根据前端传来的条件经过特定算法生成 key，即一个条件一个 key。</li></ul>`,99))])}const y=n(d,[["render",u]]),A=JSON.parse('{"path":"/java/u92wmycg/","title":"JUC","lang":"zh-CN","frontmatter":{"title":"JUC","createTime":"2025/05/25 16:59:01","permalink":"/java/u92wmycg/"},"readingTime":{"minutes":37.34,"words":11201},"git":{"updatedTime":1751383286000,"contributors":[{"name":"csx","username":"csx","email":"2926027318@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/csx?v=4","url":"https://github.com/csx"}]},"filePathRelative":"notes/java/juc/index.md","headers":[]}');export{y as comp,A as data};
